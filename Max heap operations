#include<iostream>
#define MAX 100
using namespace std;

void HeapifyDown(int arr[], int n, int i) {
    int largest = i;
    int left = 2 * i + 1;
    int right = 2 * i + 2;

    if (left < n && arr[left] > arr[largest])
        largest = left;

    if (right < n && arr[right] > arr[largest])
        largest = right;

    if (largest != i) {
        swap(arr[i], arr[largest]);
        HeapifyDown(arr, n, largest);
    }
}

void HeapifyUp(int arr[], int i) {
    while(i > 0) {
        int parent = (i - 1) / 2;
        if(arr[parent] < arr[i])
            swap(arr[i], arr[parent]);
        else
            break;
        i = parent; // Move up the heap
    }
}

void insert(int arr[], int &n) {
    int val;
    cout << "\nEnter the number to insert: ";
    cin >> val;
    arr[n] = val;
    HeapifyUp(arr, n);
    n++;
}

void Delete(int arr[], int &n) {
    if (n == 0) {
        cout << "\nHeap is empty!\n";
        return;
    }
    arr[0] = arr[n - 1];
    n--;
    HeapifyDown(arr, n, 0);
}

void display(int arr[], int n) {
    for(int i = 0; i < n; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;
}

int main() {
    int arr[MAX];
    int n = 0; // Initial number of elements
    int ch;

    cout << "MaxHeap\n";

    do {
        cout << "\nEnter your choice:\n1.Insert\n2.Delete\n3.Display\n4.Exit\n";
        cin >> ch;
        switch(ch) {
            case 1:
                insert(arr, n);
                break;
            case 2:
                Delete(arr, n);
                break;
            case 3:
                display(arr, n);
                break;
            case 4:
                cout << "Exiting...\n";
                break;
            default:
                cout << "Invalid choice! Please enter again.\n";
                break;
        }
    } while(ch != 4);

    return 0;
}
